// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

/**
 * @title ZKSyncContributor
 * @dev Basic ERC721 token with auto-incrementing token IDs.
 * The owner can mint new tokens. Token URIs are autogenerated based on a base URI.
 */
contract ZKsyncDevNFT is ERC721Enumerable, Ownable {
    constructor() ERC721("ZKSync Contributor", "ZKSyncDev") {}

    function _baseURI() internal view virtual override returns (string memory) {
        return "http://github.com/matter-labs/zksync-era/";
    }

    /**
     * @dev Mints a new token to the specified address.
     * Only the owner can mint new tokens.
     * @param to The address that will receive the minted token.
     */
    function mint(
        address to,
        string calldata githubUsername
    ) external onlyOwner {
        _mint(to, uint256(keccak256(abi.encode(githubUsername))));
    }

    function exists(
        string calldata githubUsername
    ) external view returns (bool) {
        return _exists(uint256(keccak256(abi.encode(githubUsername))));
    }

    function githubToToken(
        string calldata githubUsername
    ) external pure returns (uint256) {
        return uint256(keccak256(abi.encode(githubUsername)));
    }

    // Additional functions or overrides can be added here if needed.
}
